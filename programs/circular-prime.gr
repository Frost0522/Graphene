// 
// ported by Eugene Wallingford from a program written
// in another language by former student Andrew Howard
//
// A circular prime is a prime number all of which's cyclical
// permutations are prime.  For example, 37 is a circular prime,
// because 73 is also prime.  113 is, too, because 131 and 311
// are prime.
//
// https://en.wikipedia.org/wiki/Circular_prime
//

fn main(x:integer)->integer
   circularPrimesTo(x)

fn circularPrimesTo(x:integer)->integer
   circularPrimesToHelper(x+1, 2, 0)

fn circularPrimesToHelper(top:integer, x:integer, count:integer)->integer
   if (x < top)
      if (isCircularPrime(x))
         circularPrimesToHelper(top, x+1, count+1)
      else
         circularPrimesToHelper(top, x+1, count)
   else
      count

fn isCircularPrime(x:integer)->boolean
   if (isCircularPrimeHelper( x, log10(x)+1 ))
      report(x)
   else
      false

fn isCircularPrimeHelper(x:integer, turns:integer)->boolean
   if (turns == 0)
      true
   else
      isPrime(x) and isCircularPrimeHelper( rotate(x), turns-1 )

fn report(x:integer)->boolean
   print(x)
   true

fn rotate(x:integer)->integer
   x/10 + ( rem(x,10) * pow(10, log10(x)) )

fn pow(x:integer,y:integer)->integer
   powHelper(x,y,x)

fn powHelper(base:integer, power:integer, total:integer)->integer
   if (power == 0)
      1
   else if (power == 1)
      total
   else
      powHelper(base, power-1, base*total)

fn log10(x:integer)->integer
   log10Helper(x,0)

fn log10Helper(x:integer, y:integer)->integer
   if ((x / 10) == 0)
      y
   else
      log10Helper( x/10, y+1 )

// -----  code blatantly stolen from sieve  ----- //

fn isPrime(n : integer) -> boolean
   not hasDivisorFrom(2, n)

fn hasDivisorFrom(i : integer, n : integer) -> boolean
   if (i < n)
      divides(i, n) or hasDivisorFrom(i+1, n)
   else 
      false

fn divides(a : integer, b : integer) -> boolean
   rem(b, a) == 0

fn rem(num : integer, den : integer) -> integer
   if (num < den)
      num
   else
      rem(num-den, den)