// ---------------------------------------------------------------
//
// This program determines if its command-line argument, a number,
// is "excellent": when split on half n=ab, b*b - a*a = n.  For
// example, 48 is excellent, because 8**2 - 4**2 == 48.
//
// http://programmingpraxis.com/2015/03/24/excellent-numbers/
//
// ---------------------------------------------------------------

// ----------------------------------------------
// functions from the Graphene library
// ----------------------------------------------

fn MOD(m : integer, n : integer) -> integer
   m - m/n * n

fn EXP(m : integer, n : integer) -> integer
   if (n == 0) 1 else m * EXP(m, n-1)

fn ODD(n : integer) -> boolean
   if (LE(0, n))
      GT(n, DIV(n,2) + DIV(n,2))
   else
      GT(NEG(n), DIV(NEG(n),2) + DIV(NEG(n),2))

fn LT(p : integer, q : integer) -> boolean
   p < q

fn EQ(p : integer, q : integer) -> boolean
   p == q

fn LE(p : integer, q : integer) -> boolean
   LT(p, q) or EQ(p, q)

fn GE(p : integer, q : integer) -> boolean
   not LT(p, q)

fn GT(p : integer, q : integer) -> boolean
   not LE(p, q)

fn DIV(p : integer, q : integer) -> integer
   p / q

fn NEG(n : integer) -> integer
   -n

// ----------------------------------------------
// helper functions
// ----------------------------------------------

fn length(n : integer) -> integer
   if (n < 10)
      1
   else
      1 + length(n / 10)

fn a(n : integer) -> integer     //* we could implement this as take *//
   n / EXP(10, length(n)/2)

fn b(n : integer) -> integer     //* we could implement this as drop *//
   MOD(n, EXP(10, length(n)/2))

fn excellentDiff(a : integer, b : integer) -> integer
   b*b - a*a

// ----------------------------------------------
// primary functions
// ----------------------------------------------

fn isExcellentSwitch(n : integer, length : integer) -> boolean
   if (ODD(length))
      false
   else
      n == excellentDiff(a(n), b(n))

fn main(n : integer) -> boolean
   isExcellentSwitch(n, length(n))
