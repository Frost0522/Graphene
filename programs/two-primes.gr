//
//  integer  :=  digit  |  integer digit
//

fn emirp(n: integer) -> boolean
    isPrime(n) and isPrime(reverse(n))

fn snowball(n: integer) -> boolean
    isPrime(n) and ((n < 10) or snowball(n/10))

// --------------------------------------
// control functions for main program:
//    3 for emirp, 5 for snowball
//    8 for both emirp and snowball
// --------------------------------------

fn doBoth(n: integer) -> boolean
    print(emirp(n))
    snowball(n)

fn main(n: integer, selector: integer) -> boolean
   if (selector == 3)
      emirp(n) 
   else if (selector == 5)
      snowball(n)
   else if (selector == 8)
      doBoth(n)
   else
      false

// --------------------------------------
// code to compute prime from sieve
// --------------------------------------

fn isPrime(n : integer) -> boolean
   not hasDivisorFrom(2, n)

fn hasDivisorFrom(i : integer, n : integer) -> boolean
   if (i < n)
      divides(i, n) or hasDivisorFrom(i+1, n)
   else
      false

fn divides(a : integer, b : integer) -> boolean
   MOD(b, a) == 0

// --------------------------------------
// code for reverse from palindrome
// --------------------------------------

fn reverse(n : integer) -> integer
  reverseL(n, 0)

fn reverseL(n : integer, nR : integer) -> integer
  if (n == 0)
     nR
  else
     reverseL(n / 10, 10 * nR + MOD(n, 10))

// --------------------------------------
// code from Graphene library
// --------------------------------------

fn MOD(m : integer, n : integer) -> integer
   m - m/n * n

// --------------------------------------
